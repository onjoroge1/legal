"use client"

import { useEffect } from "react"
import { useRouter } from "next/navigation"
import { TEMPLATE_CATEGORIES } from "@/lib/constants"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Textarea } from "@/components/ui/textarea"
import { useSession } from "next-auth/react"
import { useState, useCallback, use } from "react"
import { Progress } from "@/components/ui/progress"
import { CheckCircle2, Circle, ChevronLeft, Save, FileText, ArrowLeft, Loader2 } from "lucide-react"
import Link from "next/link"
import { toast } from "sonner"
import { DocumentPreview } from "@/components/document-preview"
import { DocumentGenerationLoading } from "@/components/document-generation-loading"
import { useQuery } from '@tanstack/react-query'
import { TemplateField } from "@/types/template"

interface GeneratedDocument {
  id: string
  content: string
  metadata?: Record<string, any>
}

export default function TemplatePage({ params }: { params: Promise<{ id: string }> }) {
  const resolvedParams = use(params)
  const router = useRouter()
  const { data: session } = useSession()
  const [mounted, setMounted] = useState(false)
  const [formData, setFormData] = useState<Record<string, any>>({})
  const [isGenerating, setIsGenerating] = useState(false)
  const [generatedDocument, setGeneratedDocument] = useState<GeneratedDocument | null>(null)
  const [isSaving, setIsSaving] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [currentSection, setCurrentSection] = useState<string>("Basic Information")
  const [formProgress, setFormProgress] = useState(0)

  // Fetch template fields from the API
  const { data: templateFields = [], isLoading: isLoadingFields } = useQuery({
    queryKey: ['templateFields', resolvedParams.id],
    queryFn: async () => {
      const response = await fetch(`/api/templates/${resolvedParams.id}/fields`)
      if (!response.ok) {
        throw new Error('Failed to fetch template fields')
      }
      return response.json()
    }
  })

  useEffect(() => {
    setMounted(true)
  }, [])

  // Calculate form progress based on required fields
  useEffect(() => {
    if (!mounted) return

    const requiredFields = templateFields.filter((field) => field.required)
    const filledFields = requiredFields.filter((field) => {
      const value = formData[field.id]
      return value !== undefined && value !== null && value !== ""
    })
    const progress = (filledFields.length / requiredFields.length) * 100
    setFormProgress(progress)
  }, [formData, templateFields, mounted])

  // Group fields by section
  const fieldsBySection = templateFields.reduce((acc, field) => {
    if (!acc[field.section]) {
      acc[field.section] = []
    }
    acc[field.section].push(field)
    return acc
  }, {} as Record<string, TemplateField[]>)

  // Handle input changes
  const handleInputChange = (fieldId: string, value: any) => {
    setFormData((prev) => ({ ...prev, [fieldId]: value }))
  }

  // Handle document generation
  const handleGenerateDocument = async () => {
    setIsGenerating(true)
    setError(null)

    try {
      const response = await fetch("/api/documents/generate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          templateId: resolvedParams.id,
          formData,
        }),
      })

      if (!response.ok) {
        throw new Error("Failed to generate document")
      }

      const data = await response.json()
      console.log("Document generation response:", data) // Debug log
      
      // Fetch the complete document content
      const documentResponse = await fetch(`/api/documents/${data.documentId}`)
      if (!documentResponse.ok) {
        throw new Error("Failed to fetch document content")
      }
      
      const documentData = await documentResponse.json()
      console.log("Document content:", documentData) // Debug log
      setGeneratedDocument(documentData)
    } catch (err) {
      console.error("Document generation error:", err) // Debug log
      setError(err instanceof Error ? err.message : "An error occurred")
    } finally {
      setIsGenerating(false)
    }
  }

  // Handle document saving
  const handleSaveDocument = async () => {
    if (!generatedDocument) return

    setIsSaving(true)
    setError(null)

    try {
      const response = await fetch("/api/documents", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          templateId: resolvedParams.id,
          content: generatedDocument.content,
          metadata: generatedDocument.metadata,
        }),
      })

      if (!response.ok) {
        throw new Error("Failed to save document")
      }

      router.push("/dashboard/documents")
    } catch (err) {
      setError(err instanceof Error ? err.message : "An error occurred")
    } finally {
      setIsSaving(false)
    }
  }

  // Handle canceling document generation
  const handleCancelGeneration = () => {
    setGeneratedDocument(null)
    setError(null)
  }

  // Get the template name from the ID
  const getTemplateName = (id: string) => {
    const template = TEMPLATE_CATEGORIES.flatMap(category => category.templates)
      .find(template => template.id === id)
    return template?.name || "Document Form"
  }

  if (!mounted || isLoadingFields) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    )
  }

  return (
    <div className="container mx-auto py-6">
      <div className="flex items-center gap-4 mb-6">
        <Button variant="ghost" size="icon" onClick={() => router.back()}>
          <ArrowLeft className="h-4 w-4" />
        </Button>
        <div className="flex-1">
          <h1 className="text-3xl font-bold">{getTemplateName(resolvedParams.id)}</h1>
          <p className="text-muted-foreground">
            Fill out the form below to generate your document
          </p>
        </div>
        <div className="flex gap-2">
          {generatedDocument ? (
            <>
              <Button onClick={handleSaveDocument} disabled={isSaving}>
                {isSaving ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Saving...
                  </>
                ) : (
                  "Save Document"
                )}
              </Button>
              <Button variant="outline" onClick={handleCancelGeneration}>
                Cancel
              </Button>
            </>
          ) : (
            <Button 
              onClick={handleGenerateDocument} 
              disabled={isGenerating || formProgress < 95}
            >
              {isGenerating ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Generating...
                </>
              ) : (
                "Generate Document"
              )}
            </Button>
          )}
        </div>
      </div>

      {error && (
        <div className="mb-6 p-4 bg-red-50 text-red-700 rounded-lg">
          {error}
        </div>
      )}

      {generatedDocument ? (
        <DocumentPreview content={generatedDocument.content} />
      ) : (
        <>
          <div className="mb-6">
            <div className="flex items-center gap-4">
              <Progress value={formProgress} className="flex-1" />
              <span className="text-sm text-muted-foreground">
                {Math.round(formProgress)}% Complete
              </span>
            </div>
          </div>

          <div className="grid grid-cols-4 gap-6">
            <Card className="col-span-1">
              <CardHeader>
                <CardTitle>Sections</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-1">
                  {Object.keys(fieldsBySection).map((section) => (
                    <Button
                      key={section}
                      variant={currentSection === section ? "default" : "ghost"}
                      className="w-full justify-start"
                      onClick={() => setCurrentSection(section)}
                    >
                      {currentSection === section ? (
                        <CheckCircle2 className="mr-2 h-4 w-4" />
                      ) : (
                        <Circle className="mr-2 h-4 w-4" />
                      )}
                      {section}
                    </Button>
                  ))}
                </div>
              </CardContent>
            </Card>

            <Card className="col-span-3">
              <CardHeader>
                <CardTitle>{currentSection}</CardTitle>
                <CardDescription>
                  Fill out the fields below
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  {fieldsBySection[currentSection]?.map((field) => {
                    const showField = !field.showIf || (
                      formData[field.showIf.field] === field.showIf.value ||
                      (Array.isArray(field.showIf.value) && 
                        field.showIf.value.includes(formData[field.showIf.field]))
                    )

                    if (!showField) return null

                    return (
                      <div key={field.id}>
                        <Label>
                          {field.label}
                          {field.required && <span className="text-red-500 ml-1">*</span>}
                        </Label>
                        {field.type === "text" && (
                          <Input
                            value={formData[field.id] || ""}
                            onChange={(e) => handleInputChange(field.id, e.target.value)}
                            placeholder={field.placeholder || ""}
                          />
                        )}
                        {field.type === "textarea" && (
                          <Textarea
                            value={formData[field.id] || ""}
                            onChange={(e) => handleInputChange(field.id, e.target.value)}
                            placeholder={field.placeholder || ""}
                          />
                        )}
                        {field.type === "select" && (
                          <Select
                            value={formData[field.id] || ""}
                            onValueChange={(value) => handleInputChange(field.id, value)}
                          >
                            <SelectTrigger>
                              <SelectValue placeholder="Select an option" />
                            </SelectTrigger>
                            <SelectContent>
                              {field.options?.map((option) => (
                                <SelectItem key={option} value={option}>
                                  {option}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        )}
                        {field.type === "checkbox" && (
                          <div className="flex items-center space-x-2">
                            <Checkbox
                              id={field.id}
                              checked={formData[field.id] || false}
                              onCheckedChange={(checked) =>
                                handleInputChange(field.id, checked)
                              }
                            />
                            <label
                              htmlFor={field.id}
                              className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                            >
                              {field.label}
                            </label>
                          </div>
                        )}
                        {field.type === "radio" && field.options && (
                          <RadioGroup
                            value={formData[field.id] || ""}
                            onValueChange={(value) => handleInputChange(field.id, value)}
                          >
                            {field.options.map((option) => (
                              <div key={option} className="flex items-center space-x-2">
                                <RadioGroupItem value={option} id={`${field.id}-${option}`} />
                                <Label htmlFor={`${field.id}-${option}`}>{option}</Label>
                              </div>
                            ))}
                          </RadioGroup>
                        )}
                        {field.helpText && (
                          <p className="text-sm text-muted-foreground mt-1">
                            {field.helpText}
                          </p>
                        )}
                      </div>
                    )
                  })}
                </div>
              </CardContent>
            </Card>
          </div>
        </>
      )}
    </div>
  )
} 