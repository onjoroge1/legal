generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                      String                 @id @default(cuid())
  name                    String
  email                   String                 @unique
  password                String
  emailVerified           DateTime?
  verificationToken       String?                @unique
  verificationTokenExpiry DateTime?
  resetToken              String?                @unique
  resetTokenExpiry        DateTime?
  image                   String?
  isAdmin                 Boolean                @default(false)
  subscriptionTier        String                 @default("free")
  subscriptionStatus      String                 @default("inactive")
  subscriptionStartDate   DateTime?
  subscriptionEndDate     DateTime?
  stripeCustomerId        String?                @unique
  stripeSubscriptionId    String?                @unique
  firstName               String?
  lastName                String?
  company                 String?
  businessName            String?
  businessType            String?
  businessId              String?
  businessAddress         String?
  businessCity            String?
  businessState           String?
  businessZip             String?
  defaultDocumentFormat   String                 @default("PDF")
  autoSaveEnabled         Boolean                @default(true)
  defaultLanguage         String                 @default("English (US)")
  timezone                String                 @default("UTC")
  emailNotifications      String?
  inAppNotifications      String?
  twoFactorEnabled        Boolean                @default(false)
  twoFactorSecret         String?
  lastPasswordChange      DateTime?
  activeSessions          String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  accounts                Account[]
  documents               Document[]
  collaboratedDocs        DocumentCollaborator[]
  signatures              DocumentSignature[]
  sessions                Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id            String                 @id @default(cuid())
  title         String
  type          String
  description   String?
  status        String
  content       String
  state         String?
  metadata      Json?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  userId        String
  templateId    String?
  template      DocumentTemplate?      @relation(fields: [templateId], references: [id])
  user          User                   @relation(fields: [userId], references: [id])
  collaborators DocumentCollaborator[]
  parties       DocumentParty[]
  signatures    DocumentSignature[]
}

model DocumentParty {
  id         String   @id @default(cuid())
  name       String
  type       String
  address    String?
  email      String?
  documentId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  document   Document @relation(fields: [documentId], references: [id])
}

model DocumentTemplate {
  id          String           @id @default(cuid())
  code        String?          // Making it optional initially
  name        String
  type        String
  description String?
  content     String?          // Making it optional before removal
  state       String?
  categoryId  String
  category    Category         @relation(fields: [categoryId], references: [id])
  version     String           @default("1.0.0")
  metadata    Json?
  variables   Json?            // Making it optional before removal
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  documents   Document[]
  fields      TemplateField[]

  @@unique([code])            // Add unique constraint for when we make it required
}

model TemplateField {
  id            String            @id @default(cuid())
  fieldId       String            // e.g. "state", "propertyAddress"
  label         String
  type          String
  required      Boolean           @default(false)
  section       String
  helpText      String?
  placeholder   String?
  templateId    String
  template      DocumentTemplate  @relation(fields: [templateId], references: [id], onDelete: Cascade)
  options       FieldOption[]
  dependencies  FieldDependency[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@unique([templateId, fieldId])
}

model FieldOption {
  id        String        @id @default(cuid())
  value     String
  label     String?
  fieldId   String
  field     TemplateField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())
}

model FieldDependency {
  id                String        @id @default(cuid())
  fieldId          String
  field            TemplateField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  dependsOnFieldId String
  conditionType    String        // e.g. "equals", "not_equals", "greater_than"
  conditionValue   String
  createdAt        DateTime      @default(now())
}

model DocumentCollaborator {
  id         String   @id @default(cuid())
  documentId String
  userId     String
  role       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  document   Document @relation(fields: [documentId], references: [id])
}

model DocumentSignature {
  id         String   @id @default(cuid())
  documentId String
  userId     String
  signedAt   DateTime @default(now())
  signature  String
  user       User     @relation(fields: [userId], references: [id])
  document   Document @relation(fields: [documentId], references: [id])
}

model Category {
  id          String           @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  templates   DocumentTemplate[]
}
